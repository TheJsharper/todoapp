{"ast":null,"code":"import { filterReducer } from './filter/filter.reducer';\nimport { Todo } from './models/todo.model';\nimport { ADD_TODO, AddTodoAction, DELETE_COMPLETED_TODO, DELETE_TODO, DeleteAllCompletedTodoAction, DeleteTodoAction, EDIT_TODO, EditTodoAction, TOGGLE_ALL_TODO, TOGGLE_TODO, ToggleAllTodoAction, ToggleTodoAction } from './todo.actions';\nconst initialState = [new Todo('Watch match barcelona vs. manU'), new Todo('Play with valentin'), new Todo('Go to shop')].map((value, index) => {\n  if (index === 2) {\n    value.completion = true;\n  }\n  return value;\n});\nexport function todoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      if (action instanceof AddTodoAction) {\n        const newTodo = new Todo(action.content);\n        return [...state, newTodo];\n      }\n      break;\n    case TOGGLE_TODO:\n      if (action instanceof ToggleTodoAction) {\n        return state.map(todo => {\n          if (todo.id === action.id) {\n            const todoRef = {\n              ...todo,\n              completion: !todo.completion\n            };\n            return todoRef;\n          } else {\n            return todo;\n          }\n        });\n      }\n      break;\n    case EDIT_TODO:\n      if (action instanceof EditTodoAction) {\n        return state.map(todo => {\n          if (todo.id === action.id) {\n            const todoRef = {\n              ...todo,\n              content: action.newContent\n            };\n            return todoRef;\n          } else {\n            return todo;\n          }\n        });\n      }\n      break;\n    case DELETE_TODO:\n      if (action instanceof DeleteTodoAction) {\n        return state.filter(todo => todo.id !== action.id);\n      }\n      break;\n    case TOGGLE_ALL_TODO:\n      if (action instanceof ToggleAllTodoAction) {\n        return state.map(todo => {\n          return {\n            ...todo,\n            completion: !todo.completion\n          };\n        });\n      }\n      break;\n    case DELETE_COMPLETED_TODO:\n      if (action instanceof DeleteAllCompletedTodoAction) {\n        return state.filter(todo => !todo.completion);\n      }\n      break;\n    default:\n      {\n        return state;\n      }\n  }\n  return state;\n}\nexport const reducers = {\n  todos: todoReducer,\n  //filter: (state: 'completed' | 'pending' | 'all' = 'all', action: Action<string>) => filterReducer(state, action as SetFilterAction)\n  filter: filterReducer\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}